use core {package, *}
use runtime
use otmp
use nimbus {*}
use core.encoding.json


@route.{.GET, "/"}
(c: Context) {
    articles := iter.as_iter(news_articles->get() ?? .[])->take(2)->collect()
    c->render("pages/homepage", &.{ articles = articles })
}

@route.{.GET, "/ovmwasm"}
(c: Context) => c->render("pages/ovmwasm", null)

@route.{.GET, "/docs"}
(c: Context) => c->render("pages/docs", null)

@route.{.GET, "/docs/design"}
(c: Context) => c->render("pages/docs/design", null)

@route.{.GET, "/docs/install"}
(c: Context) => c->render("pages/docs/install", null)

@route.{.GET, "/docs/setup"}
(c: Context) => c->render("pages/docs/env_setup", null)

@route.{.GET, "/docs/getting_started"}
(c: Context) => c->render("pages/docs/getting_started", null)

@route.{.GET, "/docs/guides"}
(c: Context) => c->render("pages/docs/guides", null)

@route.{.GET, "/docs/guides/http-server"}
(c: Context) => c->render("pages/docs/guide_http_server", null)

@route.{.GET, "/docs/guides/raylib"}
(c: Context) => c->render("pages/docs/guide_raylib", null)

@route.{.GET, "/docs/packages"}
(c: Context) => c->render("pages/docs/package", null)

@route.{.GET, "/docs/packages/list"}
(c: Context) {
    c->render("pages/docs/package_list", &.{
        core_packages = core_packages,
        third_party_packages = third_party_packages
    })
}

@route.{.GET, "/playground"}
(c: Context) {
    c->html(200, "This has been moved to <a href=\"https://try.onyxlang.io\">try.onyxlang.io</a>.")
}

@route.{.GET, "/community"}
(c: Context) => c->render("pages/community", null)


@route.{.GET, "/robots.txt"}
(c: Context) {
    c->file(200, "text/plain", "./www/static/robots.txt")
}



@route.{.GET, "/news/:article"}
(c: Context) {
    article_path := c->param("article") ?? ""
    article := array.first(news_articles->get() ?? .[], [n](n.path == article_path))
    if !article {
        c->render("pages/404", null, status=404)
        return
    }

    filename := tprintf("www/news-articles/{}.html", article.path)

    if os.file_exists(filename) {
        contents := os.get_contents(filename)
        defer delete(&contents)

        c->render("pages/news_article", &.{
            article = .{ contents = contents, name = article.name, description = article.description }
        })

    } else {
        c->render("pages/404", null, status=404)
        return
    }
}

@route.{.GET, "/news"}
(c: Context) {
    articles := news_articles->get() ?? .[]

    c->render("pages/news", &.{
        articles = articles
    })
}

@route.{.GET, "/examples"}
(c: Context) {
    exs := examples->get() ?? .[]

    c->render("pages/examples", &.{
        examples = exs
    })
}

@route.{.GET, "/examples/:name"}
(c: Context) {
    exs := examples->get() ?? .[]
    name := c->param("name") ?? ""

    ex := Slice.first(exs, [x](x.name == name))

    c->render("pages/example", &.{
        ex = ex
    })
}


