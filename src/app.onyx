use core {package, *}
use runtime
use otmp
use http
use http.server {Req :: Request, Res :: Response, route}

#inject runtime.vars {
    Enable_Heap_Debug :: true
    Debug :: true
}

reg: otmp.TemplateRegistry;
#inject Res {
    render :: (r: &Res, template: str, vars: any) {
        s := reg->render_template(template, &r.writer, .{ vars.data, vars.type });
        r->status(200 if s == .None else 400);
        r->end();
    }
}

@route.{.GET, "/"}
(req: &Req, res: &Res) {
    res->render("pages/homepage", null);
}


@route.{.GET, "/ovmwasm"}
(req: &Req, res: &Res) {
    res->render("pages/ovmwasm", null);
}

@route.{.GET, "/docs"}
(req: &Req, res: &Res) {
    res->render("pages/docs", null);
}

@route.{.GET, "/docs/install"}
(req: &Req, res: &Res) {
    res->render("pages/docs/install", null);
}

@route.{.GET, "/news/:article"}
(req: &Req, res: &Res) {
    // TODO: Safety / error checking here
    filename := tprintf("www/news-articles/{}.html", req.url_params["article"]);

    if os.file_exists(filename) {
        article := os.get_contents(filename);
        defer delete(&article);

        res->render("pages/news_article", &.{
            article = article
        });

    } else {
        res->status(404);
    }
}

@route.{.GET, "/news"}
(req: &Req, res: &Res) {
    articles := make([..] str);

    for os.list_directory("www/news-articles") {
        name := it->name();
        if string.ends_with(name, ".html") {
            articles << string.temp_copy(name[0 .. name.length-5]);
        }
    }

    res->render("pages/news", &.{
        articles = articles
    });
}

main :: () {
    reg = otmp.registry();
    reg->load_directory("./www/templates", ".html");

    app := http.server.application();

    http.server.set_mime_type("svg", "image/svg+xml");

    files := http.server.static("/static/", "./www/static/");
    app->pipe(&files);

    #if #defined(runtime.vars.Debug) {
        app->pipe((req, res) => {
            reg->refresh_templates();
        });
    }

    router := http.server.router();
    router->collect_routes();
    app->pipe(&router);

    app->pipe((req, res) => {
        if !res.completed {
            res->render("pages/404", null);
        }
    });

    logger := http.server.logger();
    app->pipe(&logger);

    app->serve(8081);
    println("Server stopping...");
}


