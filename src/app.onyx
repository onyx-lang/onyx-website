use core {package, *}
use runtime
use otmp
use nimbus {*}
use core.encoding.json

runtime.vars.Enable_Heap_Debug :: true
runtime.vars.Debug :: true
// runtime.vars.CGI_MODE :: true

reg: otmp.TemplateRegistry
Context.render :: (c: Context, template: str, vars: any, status := 200) {
    use m := misc.any_to_map(vars) ?? make(Map(str, any))

    c->set_header("Content-Type", "text/html")
    c->write_headers(status)

    s := reg->render_template(template, c->writer(), m)

    if s != .None { log(.Warning, "Template Renderer", tprintf("{}", s)) }
}

main :: () {
    load_library_list()
    
    reg = otmp.registry()
    reg->load_directory("www/templates", ".html")

    news_articles = .{
        resource = .{}
        max_age = 60 * 60 // 1 hour

        fetch_resource = fetch_articles
        release_resource = release_articles
    }

    examples = .{
        resource = .{}
        max_age = 60 * 60 * 24 // 1 day
        fetch_resource = load_examples
        release_resource = delete_examples
    }

    n := Nimbus.new()

    set_mime_type("svg", "image/svg+xml")

    #if !#defined(runtime.vars.CGI_MODE) {
        n->add(logger(style=.V2))
    }

    n->add(static("/static/", "./www/static/"))

    #if #defined(runtime.vars.Debug) {
        n->add(c => {
            reg->refresh_templates()
            c->next()
        })
    }

    n->add(c => {
        c->next()

        if !c->_response().commited {
            c->render("pages/404", &.{}, 404)
        }
    })

    n->add_tagged_routes()

    #if #defined(runtime.vars.CGI_MODE) {
        n->cgi()

    } else {

        port := os.env("SERVER_PORT")
            |> Optional.value_or("8000")
            |> conv.parse(u32, _)
            |> Optional.unwrap()

        n->serve(port, .{ thread_count = 8, max_clients = 256 })

        logf(.Info, "Server stopping...")
    }
}

